#!/bin/bash
START_PWD=${PWD}
RECIPE_PATH=$(dirname $(realpath ${0}))
cd ${RECIPE_PATH}

ARCH=arm-linux-gnueabihf
SOURCES=${HOME}/SOURCES
BINARIES=${HOME}/BINARIES

BINUTILSVER=2.31.1
BINUTILSURL="https://mirror2.mirror.garr.it/mirrors/gnuftp/binutils/binutils-${BINUTILSVER}.tar.xz"
BINUTILSPKG=binutils-${ARCH}-${BINUTILSVER}
BINUTILSSRC=${SOURCES}/binutils-${BINUTILSVER}
BINUTILSLOG=${BINARIES}/binutils-${BINUTILSVER}.log
#BINUTILSBUILD=${HOME}/BUILD/${BINUTILSPKG}

ISLVER=0.20
ISLURL="http://isl.gforge.inria.fr/isl-${ISLVER}.tar.xz"
ISLPKG=isl-${ISLVER}
ISLSRC=${SOURCES}/${ISLPKG}
ISLBIN=${BINARIES}/isl-${ARCH}-${ISLVER}
ISLLOG=${ISLBIN}.log
XISLBIN=${BINARIES}/${ISLPKG}
XISLLOG=${XISLBIN}.log
#ISLBUILD=${HOME}/BUILD/${ISLSPKG}

GCCVER=8.2.1
GCCURL="https://developer.arm.com/-/media/Files/downloads/gnu-a/8.2-2018.08/gcc-arm-src-snapshot-8.2-2018.08.tar.xz?revision=849f3c32-b965-4205-b5c3-80871b389953&ln=en"
#GCCPATCHES="https://gcc.gnu.org/viewcvs/gcc/branches/gcc-8-branch/gcc/graphite.h?view=patch&r1=263194&r2=263193&pathrev=263194[-p2]"
GCCPKG=gcc-${ARCH}-${GCCVER}
GCCSRC=${SOURCES}/gcc-arm-src-snapshot-8.2-2018.08
GCCCOMMONCONFIG="--enable-languages=c,c++  --enable-shared --enable-linker-build-id --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-checking=release --enable-__cxa_atexit --enable-libmudflap --enable-libgomp --enable-libssp --enable-libquadmath --enable-libquadmath-support --enable-lto --enable-threads=posix --enable-initfini-array --enable-gnu-indirect-function --enable-multiarch \
--with-default-libstdcxx-abi=new --with-system-zlib --with-target-system-zlib \
--disable-option-checking --disable-libitm --disable-libmpx \
--without-included-gettext"
#GCCBUILD=${HOME}/BUILD/${GCCPKG}
GCCBIN=${BINARIES}/${GCCPKG}
GCCLOG=${GCCBIN}.log
GCCTAR=${BINARIES}/${GCCPKG}.tar.xz
XGCCBIN=${BINARIES}/x${GCCPKG}
XGCCLOG=${XGCCBIN}.log
DISTRO_NAME=raspbian
DISTRO_REL=stretch
DISTRO_ARCH=${ARCH}
SYSROOT=$(cd ..; pwd)/sysroots/${DISTRO_NAME}/${DISTRO_REL}/${DISTRO_ARCH}
NTHREADS=$(echo $(nproc)/2+1 | bc)
#SCPDEST="pi@127.0.0.1:"
#SCPPORT=5022
export PATH="${XGCCBIN}/bin:${PATH}"

# Not used yet
function program_transform_regex () {
	### Apply objdump libcc1 configure bug workaround
	echo "Applying objdump configuration workaround for final GCC..."
	cd ${XGCCBIN}/bin
	for file in $(ls)
	do
		ln -s ${file} $(echo ${file} | sed 's/arm-/arm-unknown-/g')
	done
	cd -
}

function create_sysroot() {
	echo "Creating SYSROOT environment..."
	../sysrootutils/create_sysroot ${DISTRO_NAME} ${DISTRO_REL} ${DISTRO_ARCH} || exit 1
	echo "Done"
	echo ""
}

function prepare_sources () {
	test ! -d ${SOURCES} && mkdir -p ${SOURCES}
	if [ ! -f "${ISLSRC}/configure" ]
	then
		echo -n "Downloading ISL..."
		wget -nc -q -P${SOURCES} --content-disposition "${ISLURL}" || exit 1
		echo "Done."
		echo -n "Uncompress ISL..."
		tar xJf ${ISLSRC}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		echo ""
	fi
	if [ ! -f "${BINUTILSSRC}/configure" ]
	then
		echo -n "Downloading BINUTILS..."
		wget -nc -q -P${SOURCES} --content-disposition "${BINUTILSURL}" || exit 1
		echo "Done."
		echo -n "Uncompress BINUTILS..."
		tar xJf ${SOURCES}/binutils-${BINUTILSVER}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		echo ""
	fi
	if [ ! -f "${GCCSRC}/configure" ]
	then
		echo -n "Downloading GCC..."
		wget -nc -q -P${SOURCES} --content-disposition "${GCCURL}" || exit 1
		echo "Done."
		echo -n "Uncompress GCC..."
		tar xJf ${SOURCES}/gcc-arm-src-snapshot-8.2-2018.08.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		patchnum=0
		if [ ! "x${GCCPATCHES}" == "x" ]
		then
			echo -n "Patching GCC..."
			for patch in ${GCCPATCHES}
			do
				let "patchnum=patchnum+1"
				patch_url="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\1/g')"
				patch_name="${GCCSRC}-$(printf "%02d\n" ${patchnum}).patch"
				patch_param="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\2/g')"
				echo -n "$patch_name... "
				wget -nc -q -O${patch_name} "${patch_url}" || exit 1
				cd ${GCCSRC}
				patch $patch_param < ${SOURCES}/${patch_name} || exit 1
				echo "Done."
				cd -
			done
		fi
		echo ""
	fi
}

function cross_isl () {
	test -d ${XISLBIN} && rm -rf ${XISLBIN}
	mkdir -p ${XISLBIN}
	if [ "x${XISLBUILD}" != "x" ]
	then
		test -d ${XISLBUILD} && rm -rf ${XISLBUILD}
		mkdir -p ${XISLBUILD}
	else
		XISLBUILD=$(mktemp -d)
	fi
	cd ${XISLBUILD}
	echo -n "Configuring ISL for CrossGCC..."
	${ISLSRC}/configure -v \
	--build=x86_64-linux-gnu --host=x86_64-linux-gnu \
	\
	--prefix=${XISLBIN} --libdir=${XISLBIN}/lib --libexecdir=${XISLBIN}/lib \
	\
	--disable-shared --enable-static --enable-multiarch \
	CC="ccache gcc" \
	CXX="ccache g++" \
	CFLAGS="-pipe -g -O3" \
	CXXFLAGS="-pipe -g -O3" \
	> ${XISLLOG} 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling ISL for CrossGCC..."
	make -j${NTHREADS} >> ${XISLLOG} 2>&1 || exit 1
	echo "Done."
	echo -n "Installing ISL for CrossGCC..."
	make install >> ${XISLLOG} 2>&1 || exit 1
	echo "Done."
	echo ""
	cd ..
	rm -rf ${XISLBUILD}
}

function binutils () {
	if [ "x${BINUTILSBUILD}" != "x" ]
	then
		test -d ${BINUTILSBUILD} && rm -rf ${BINUTILSBUILD}
		mkdir -p ${BINUTILSBUILD}
	else
		BINUTILSBUILD=$(mktemp -d)
	fi
	cd ${BINUTILSBUILD}
	echo -n "Configuring BINUTILS..."
	${BINUTILSSRC}/configure -v \
	--build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=${ARCH} \
	--with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
	\
	--prefix=${XGCCBIN} --libdir=${XGCCBIN}/lib --libexecdir=${XGCCBIN}/lib \
	\
	--enable-libquadmath --enable-libquadmath-support --enable-libssp --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-lto --enable-multiarch \
	\
	--with-default-libstdcxx-abi=new --with-system-zlib --with-target-system-zlib --with-isl=${XISLBIN} \
	CC_FOR_BUILD="ccache gcc -pipe" \
	CXX_FOR_BUILD="ccache g++ -pipe" \
	CC="ccache gcc" \
	CXX="ccache g++" \
	CFLAGS="-pipe -g -O3" \
	CXXFLAGS="-pipe -g -O3" \
	CFLAGS_FOR_TARGET="-pipe -g -O3" \
	CXXFLAGS_FOR_TARGET="-pipe -g -O3" \
	> ${BINUTILSLOG} 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling BINUTILS..."
	make -j${NTHREADS} >> ${BINUTILSLOG} 2>&1 || exit 1
	echo "Done."
	echo -n "Installing BINUTILS..."
	make install-strip >> ${BINUTILSLOG} 2>&1 || exit 1
	# program_transform_regex || exit 1
	echo "Done."
	echo ""
	cd ..
	rm -rf ${BINUTILSBUILD}
}

function cross_gcc () {
	cross_isl || exit 1
	test -d ${XGCCBIN} && rm -rf ${XGCCBIN}
	mkdir -p ${XGCCBIN}
	binutils || exit 1
	if [ "x${XGCCBUILD}" != "x" ]
	then
		test -d ${XGCCBUILD} && rm -rf ${XGCCBUILD}
		mkdir -p ${XGCCBUILD}
	else
		XGCCBUILD=$(mktemp -d)
	fi
	cd ${XGCCBUILD}
	echo -n "Configuring CrossGCC..."
	${GCCSRC}/configure -v \
	--build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=${ARCH} \
	--with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
	\
	--prefix=${XGCCBIN} --libdir=${XGCCBIN}/lib --libexecdir=${XGCCBIN}/lib \
	\
	--with-sysroot=${SYSROOT} --with-isl=${XISLBIN} \
	\
	${GCCCOMMONCONFIG} \
	\
	CC_FOR_BUILD="ccache gcc -pipe" \
	CXX_FOR_BUILD="ccache g++ -pipe" \
	CC="ccache gcc" \
	CXX="ccache g++" \
	CFLAGS="-pipe -g -O3" \
	CXXFLAGS="-pipe -g -O3" \
	CFLAGS_FOR_TARGET="-pipe -g -O3" \
	CXXFLAGS_FOR_TARGET="-pipe -g -O3" \
	> ${XGCCLOG} 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling CrossGCC..."
	make -j${NTHREADS} >> ${XGCCLOG} 2>&1 || exit 1
	echo "Done."
	echo -n "Installing CrossGCC..."
	make install-strip >> ${XGCCLOG} 2>&1 || exit 1
	echo "Done."
	echo "You can find the final CrossGCC binaries for ${ARCH} here: ${XGCCBIN}"
	echo ""
	cd ..
	rm -rf ${XGCCBUILD}
}

function final_gcc () {
	test -d ${GCCBIN} && rm -rf ${GCCBIN}
	mkdir -p ${GCCBIN}
	if [ "x${GCCBUILD}" != "x" ]
	then
		test -d ${GCCBUILD} && rm -rf ${GCCBUILD}
		mkdir -p ${GCCBUILD}
	else
		GCCBUILD=$(mktemp -d)
	fi
	cd ${GCCBUILD}
	echo -n "Configuring Final GCC..."
	${GCCSRC}/configure -v \
	--build=x86_64-linux-gnu --host=${ARCH} --target=${ARCH} \
	--program-suffix=-${GCCVER} \
	--with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
	\
	--prefix=/usr --libdir=/usr/lib/${ARCH}/${GCCVER} --libexecdir=/usr/lib --with-slibdir=/lib/${ARCH}/${GCCVER} \
	\
	--with-sysroot=/ \
	\
	--with-gmp-include=${SYSROOT}/usr/include/${ARCH} --with-gmp-lib=${SYSROOT}/usr/lib/${ARCH} --with-mpc=${SYSROOT}/usr --with-mpfr=${SYSROOT}/usr --with-isl=${SYSROOT}/usr \
	\
	${GCCCOMMONCONFIG} \
	\
	CC_FOR_BUILD="ccache gcc -pipe" \
	CXX_FOR_BUILD="ccache g++ -pipe" \
	CC="ccache ${ARCH}-gcc --sysroot=${SYSROOT} -I${SYSROOT}/usr/include/${ARCH} -B${SYSROOT}/usr/lib/${ARCH}" \
	CXX="ccache ${ARCH}-g++ --sysroot=${SYSROOT} -I${SYSROOT}/usr/include/${ARCH} -B${SYSROOT}/usr/lib/${ARCH}" \
	CFLAGS="-pipe -g -O3" \
	CXXFLAGS="-pipe -g -O3" \
	LDFLAGS="-L${SYSROOT}/lib/${ARCH}" \
	CC_FOR_TARGET="ccache ${ARCH}-gcc" \
	CXX_FOR_TARGET="ccache ${ARCH}-g++" \
	CFLAGS_FOR_TARGET="-pipe -g -O3" \
	CXXFLAGS_FOR_TARGET="-pipe -g -O3" \
	host_configargs="gcc_cv_objdump=${ARCH}-objdump" \
	> ${GCCLOG} 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling Final GCC..."
	make -j${NTHREADS} >> ${GCCLOG} 2>&1 || exit 1
	echo "Done."
	echo -n "Installing Final GCC..."
	make DESTDIR=${GCCBIN} install-strip >> ${GCCLOG} 2>&1 || exit 1
	echo "Done."
	echo "You can find the final GCC binaries for ${ARCH} here: ${GCCBIN}"
	echo ""
	cd ..
	rm -rf ${GCCBUILD}
}

function test_xgcc () {
	echo -n "Testing XGCC..."
	CPUARCH=$(echo ${ARCH} | sed 's/\(+*\)-.*/\1/g')
	QEMU=0
	test -f "$(which qemu-${CPUARCH} 2>/dev/null)" && QEMU=1
	TESTSTRING="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
	cat > /tmp/${TESTSTRING}.c <<-EOF
		#include <stdio.h>

		int
		main (void)
		{
		printf ("${TESTSTRING}\n");
		return 0;
		}
	EOF
	echo -n "Compile test..."
	${ARCH}-gcc /tmp/${TESTSTRING}.c -o /tmp/${TESTSTRING} || exit 1
	if [ "${QEMU}" -eq "1" ]
	then
		echo -n "Test executable with qemu-${CPUARCH}..."
		TEST=$(qemu-${CPUARCH} -L ${SYSROOT} /tmp/${TESTSTRING}) || exit 1
		[ ! "${TEST}" == "${TESTSTRING}" ] && exit 1
	fi
	rm -f /tmp/${TESTSTRING}.c /tmp/${TESTSTRING}
	echo "Done."
	echo ""
}

function zip_gcc () {
	echo -n "Zipping final GCC..."
	test -f ${GCCTAR} && rm -f ${GCCTAR}
	cd ${GCCBIN} && \
	tar cf - . | xz -z -T0 - > ${GCCTAR}
	echo "Done."
	echo "You can find the final GCC package here: ${GCCTAR}"
	echo ""
}

function send_gcc () {
	test ! -z "${SCPDEST:-}" && test -f ${GCCTAR} && scp ${SCPPORT:+-P${SCPPORT}} ${GCCTAR} ${SCPDEST}
}

test ! -d ${BINARIES} && mkdir -p ${BINARIES}
#create_sysroot || exit 1
prepare_sources || exit 1
cross_gcc || exit 1
test_xgcc || exit 1
#final_gcc || exit 1
#zip_gcc || exit 1
#send_gcc

cd ${START_PWD}
