#!/bin/bash
START_PWD=${PWD}
RECIPE_PATH=$(dirname $(realpath ${0}))
cd ${RECIPE_PATH}

ARCH=arm-linux-gnueabihf
BINUTILSVER=2.31.1
BINUTILSPKG=binutils-${ARCH}-${BINUTILSVER}
BINUTILSSRC=${HOME}/SOURCES/binutils-${BINUTILSVER}
BINUTILSBUILD=${HOME}/BUILD/${BINUTILSPKG}
GCCVER=8.2.1
GCCPKG=gcc-${ARCH}-${GCCVER}
GCCSRC=${HOME}/SOURCES/gcc-arm-src-snapshot-8.2-2018.08
GCCCOMMONCONFIG="--enable-languages=c,c++  --enable-shared --enable-linker-build-id --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --enable-checking=release --enable-__cxa_atexit --enable-libmudflap --enable-libgomp --enable-libssp --enable-libquadmath --enable-libquadmath-support --enable-lto --enable-threads=posix --enable-initfini-array --enable-gnu-indirect-function --enable-multiarch \
\
--with-default-libstdcxx-abi=new --with-system-zlib --with-target-system-zlib \
\
--disable-option-checking --disable-libitm --disable-libmpx \
\
--without-included-gettext"
GCCBUILD=${HOME}/BUILD/${GCCPKG}
GCCBIN=${HOME}/BINARIES/${GCCPKG}
XGCCBIN=${HOME}/BINARIES/x${GCCPKG}
GCCTAR=${HOME}/${GCCPKG}.tar.xz
DISTRO_NAME=raspbian
DISTRO_REL=stretch
DISTRO_ARCH=${ARCH}
SYSROOT=$(cd ..; pwd)/sysroots/${DISTRO_NAME}/${DISTRO_REL}/${DISTRO_ARCH}
#SCPDEST="pi@127.0.0.1:"
#SCPPORT=5022
export PATH="${XGCCBIN}/bin:${PATH}"

function objdump_bug_workaround () {
    ### Apply objdump libcc1 configure bug workaround
    echo "Applying objdump configuration workaround for final GCC..."
    cd ${XGCCBIN}/bin
    for file in $(ls)
    do
        ln -s ${file}
        $(echo ${file} | sed 's/arm-/arm-unknown-/g')
    done
    cd -
}

function create_sysroot() {
    echo "Creating SYSROOT environment..."
    ../sysrootutils/create_sysroot ${DISTRO_NAME} ${DISTRO_REL} ${DISTRO_ARCH} || exit 1
    echo "Done"
    echo ""
}

function binutils () {
    test -d ${BINUTILSBUILD} && rm -rf ${BINUTILSBUILD}
    mkdir -p ${BINUTILSBUILD}
    cd ${BINUTILSBUILD}
    echo "Configuring BINUTILS..."
    ${BINUTILSSRC}/configure -v \
    --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=${ARCH} \
    --with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
    \
    --prefix=${XGCCBIN} --libdir=${XGCCBIN}/lib/${ARCH} --libexecdir=${XGCCBIN}/lib \
    \
    --with-sysroot=${SYSROOT} \
    \
    --enable-libquadmath --enable-libquadmath-support --enable-libssp --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-lto \
    \
    --with-default-libstdcxx-abi=new --with-system-zlib --with-target-system-zlib \
    CC_FOR_BUILD="ccache gcc -pipe" \
    CXX_FOR_BUILD="ccache g++ -pipe" \
    CC="ccache gcc" \
    CXX="ccache g++" \
    CFLAGS="-pipe -g -O3" \
    CXXFLAGS="-pipe -g -O3" \
    CFLAGS_FOR_TARGET="-pipe -g -O3" \
    CXXFLAGS_FOR_TARGET="-pipe -g -O3" \
    && \
    echo "Done" && \
    echo "" && \
    echo "Compiling BINUTILS..." && \
    make -j$(echo $(nproc)/2+1 | bc) && \
    echo "Done." && \
    echo "" && \
    echo "Installing BINUTILS..." && \
    make install-strip && \
    echo "Done." && \
    echo "" && \
    cd .. && \
    rm -rf ${BINUTILSBUILD}
}

function cross_gcc () {
    test -d ${XGCCBIN} && rm -rf ${XGCCBIN}
    mkdir -p ${XGCCBIN}
    binutils || exit 1
    mkdir -p ${GCCBUILD}
    cd ${GCCBUILD}
    echo "Configuring CrossGCC..."
    ${GCCSRC}/configure -v \
    --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=${ARCH} \
    --with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
    \
    --prefix=${XGCCBIN} --libdir=${XGCCBIN}/lib/${ARCH} --libexecdir=${XGCCBIN}/lib \
    \
    --with-sysroot=${SYSROOT} \
    \
    ${GCCCOMMONCONFIG}
    \
    CC_FOR_BUILD="ccache gcc -pipe" \
    CXX_FOR_BUILD="ccache g++ -pipe" \
    CC="ccache gcc" \
    CXX="ccache g++" \
    CFLAGS="-pipe -g -O3" \
    CXXFLAGS="-pipe -g -O3" \
    CFLAGS_FOR_TARGET="-pipe -g -O3" \
    CXXFLAGS_FOR_TARGET="-pipe -g -O3" \
    && \
    echo "Done" && \
    echo "" && \
    echo "Compiling CrossGCC..." && \
    make -j$(echo $(nproc)/2+1 | bc) && \
    echo "Done." && \
    echo "" && \
    echo "Installing CrossGCC..." && \
    make install-strip && \
    objdump_bug_workaround && \
    echo "Done." && \
    echo "" && \
    cd .. && \
    rm -rf ${GCCBUILD}
}

function final_gcc () {
    test -d ${GCCBUILD} && rm -rf ${GCCBUILD}
    mkdir -p ${GCCBUILD}
    test -d ${GCCBIN} && rm -rf ${GCCBIN}
    mkdir -p ${GCCBIN}
    cd ${GCCBUILD}
    echo "Configuring Final GCC..."
    ${GCCSRC}/configure -v \
    --build=x86_64-linux-gnu --host=${ARCH} --target=${ARCH} \
    --program-suffix=-${GCCVER} \
    --with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
    \
    --prefix=/usr --libdir=/usr/lib/${ARCH}/${GCCVER} --libexecdir=/usr/lib --with-slibdir=/lib/${ARCH}/${GCCVER} \
    \
    --with-sysroot=/ \
    \
    --with-gmp-include=${SYSROOT}/usr/include/${ARCH} --with-gmp-lib=${SYSROOT}/usr/lib/${ARCH} --with-mpc=${SYSROOT}/usr --with-mpfr=${SYSROOT}/usr --with-isl=${SYSROOT}/usr \
    \
    ${GCCCOMMONCONFIG}
    \
    CC_FOR_BUILD="ccache gcc -pipe" \
    CXX_FOR_BUILD="ccache g++ -pipe" \
    CC="ccache ${ARCH}-gcc --sysroot=${SYSROOT} -I${SYSROOT}/usr/include/${ARCH} -B${SYSROOT}/usr/lib/${ARCH}" \
    CXX="ccache ${ARCH}-g++ --sysroot=${SYSROOT} -I${SYSROOT}/usr/include/${ARCH} -B${SYSROOT}/usr/lib/${ARCH}" \
    CFLAGS="-pipe -g -O3" \
    CXXFLAGS="-pipe -g -O3" \
    LDFLAGS="-L${SYSROOT}/lib/${ARCH}" \
    CC_FOR_TARGET="ccache ${ARCH}-gcc" \
    CXX_FOR_TARGET="ccache ${ARCH}-g++" \
    CFLAGS_FOR_TARGET="-pipe -g -O3" \
    CXXFLAGS_FOR_TARGET="-pipe -g -O3" \
    && \
    echo "Done" && \
    echo "" && \
    echo "Compiling Final GCC..." && \
    make -j$(echo $(nproc)/2+1 | bc) && \
    echo "Done." && \
    echo "" && \
    echo "Installing Final GCC..." && \
    make DESTDIR=${GCCBIN} install-strip && \
    echo "Done." && \
    echo "" && \
    cd .. && \
    rm -rf ${GCCBUILD}
}

function test_gcc () {
    ${ARCH}-gcc -v 2>&1 > /dev/null
}

#create_sysroot || exit 1
#cross_gcc || exit 1
test_gcc || exit 1
final_gcc || exit 1

test -f ${GCCTAR} && rm -f ${GCCTAR}
cd ${GCCBIN} && \
tar cf - . | xz -z -T0 - > ${GCCTAR}
cd ${START_PWD}
test ! -z "${SCPDEST:-}" && test -f ${GCCTAR} && scp ${SCPPORT:+-P${SCPPORT}} ${GCCTAR} ${SCPDEST}