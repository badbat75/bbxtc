#!/bin/bash
START_PWD=${PWD}
PROGRAM_PATH=$(dirname $(realpath ${0}))
PROGRAM_NAME=$(basename ${0})

TOOLCHAINS=${HOME}/toolchains
SOURCES=${TOOLCHAINS}/sources
NATIVES=${TOOLCHAINS}/natives
LIBRARIES=${TOOLCHAINS}/libraries
XCOMPILERS=${TOOLCHAINS}/xcompilers
LOGS=${TOOLCHAINS}/logs

HOSTARCH=$(cc -dumpmachine)

NTHREADS=$(echo $(nproc)/2+1 | bc)
export MAKEFLAGS="-j${NTHREADS} V=1"

SCPPORT=22

	# Not used yet
	function program_transform_regex () {
		### Apply objdump libcc1 configure bug workaround
		echo "Applying objdump configuration workaround for final GCC..."
		cd ${PKG_XBIN}/bin
		for file in $(ls)
		do
			ln -s ${file} $(echo ${file} | sed 's/arm-/arm-unknown-/g')
		done
		cd -
	}

function create_sysroot() {
	echo -n "Creating SYSROOT environment..."
	${PROGRAM_PATH}/sysrootutils/create_sysroot ${DISTRO_NAME} ${DISTRO_REL} ${DISTRO_ARCH} || exit 1
	echo "Done"
	echo ""
}

function prepare_sources () {
	test ! -d ${SOURCES} && mkdir -p ${SOURCES}
	if [ ! -f "${ISLSRC}/configure" ]
	then
		echo -n "Downloading ISL..."
		wget -nc -q -P${SOURCES} --content-disposition "${ISLURL}" || exit 1
		echo "Done."
		echo -n "Uncompress ISL..."
		tar xJf ${ISLSRC}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		echo ""
	fi
	if [ ! -f "${BINUTILSSRC}/configure" ]
	then
		echo -n "Downloading BINUTILS..."
		wget -nc -q -P${SOURCES} --content-disposition "${BINUTILSURL}" || exit 1
		echo "Done."
		echo -n "Uncompress BINUTILS..."
		tar xJf ${SOURCES}/binutils-${BINUTILSVER}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		echo ""
	fi
	if [ ! -f "${GCCSRC}/configure" ]
	then
		echo -n "Downloading GCC..."
		wget -nc -q -P${SOURCES} --content-disposition "${GCCURL}" || exit 1
		echo "Done."
		echo -n "Uncompress GCC..."
		tar xJf ${SOURCES}/gcc-arm-src-snapshot-8.2-2018.08.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		patchnum=0
		if [ ! "x${GCCPATCHES}" == "x" ]
		then
			echo -n "Patching GCC..."
			for patch in ${GCCPATCHES}
			do
				let "patchnum=patchnum+1"
				patch_url="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\1/g')"
				patch_name="${GCCSRC}-$(printf "%02d\n" ${patchnum}).patch"
				patch_param="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\2/g')"
				echo -n "$patch_name... "
				wget -nc -q -O${patch_name} "${patch_url}" || exit 1
				cd ${GCCSRC}
				patch $patch_param < ${SOURCES}/${patch_name} || exit 1
				echo "Done."
				cd -
			done
		fi
		echo ""
	fi
}

	function create_base_sources () {
		BASESRC="$(mktemp -d)"
		test -d "${BASESRC}" && rm -rf ${BASESRC}
		mkdir ${BASESRC}
		ln -fs ${GCCSRC}/* ${BASESRC}
		while (( "${#}" )); do
			case ${1} in
				--with-isl)
						echo -n "Including ISL in GCC sources..."
						ln -fs ${ISLSRC} ${BASESRC}/isl
						echo "Done."
				;;
				--with-binutils)
						echo -n "Including BINUTILS in GCC sources..."
						#find ${BINUTILSSRC} -type d -exec ln -fs {} ${BASESRC} \;
						ln -fs ${BINUTILSSRC}/* ${BASESRC}
						echo "Done."
				;;
			esac
			shift
		done
	}

function host_gcc () {
	create_base_sources --with-isl
	if [ "x${XGCCBUILD}" != "x" ]
	then
		test -d ${XGCCBUILD} && rm -rf ${XGCCBUILD}
		mkdir -p ${XGCCBUILD}
	else
		XGCCBUILD=$(mktemp -d)
	fi
	cd ${XGCCBUILD}
	echo -n "Configuring HostGCC..."
	#--with-isl=${ISL_XBIN}
	#--build=${HOSTARCH} --host=${HOSTARCH} --target=${HOSTARCH} \
	${BASESRC}/configure -v \
	--prefix=${PKG_XBIN} --libdir=${PKG_XBIN}/lib --libexecdir=${PKG_XBIN}/lib \
	${GCCCOMMONCONFIG} --enable-gold --disable-multilib \
	CC_FOR_BUILD="ccache ${HOSTARCH}-gcc -O3 -pipe" \
	CXX_FOR_BUILD="ccache ${HOSTARCH}-g++ -O3 -pipe" \
	CC="ccache ${HOSTARCH}-gcc" \
	CXX="ccache ${HOSTARCH}-g++" \
	CFLAGS="${COMMON_CFLAGS}" \
	CXXFLAGS="${COMMON_CFLAGS}" \
	CFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	> ${LOGS}/host-${GCCPKG}.log 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling HostGCC..."
	make >> ${LOGS}/host-${GCCPKG}.log 2>&1 || exit 1
	echo "Done."
	echo -n "Installing HostGCC..."
	make install-strip >> ${LOGS}/host-${GCCPKG}.log 2>&1 || exit 1
	echo "Done."
	echo "You can find the final HostGCC binaries for ${TARGETARCH} here:"
	echo "${PKG_XBIN}"
	echo ""
	cd ..
	rm -rf ${XGCCBUILD}
	rm -rf ${BASESRC}
}

	function cross_isl () {
		test -d ${ISL_XBIN} && rm -rf ${ISL_XBIN}
		mkdir -p ${ISL_XBIN}
		if [ "x${XISLBUILD}" != "x" ]
		then
			test -d ${XISLBUILD} && rm -rf ${XISLBUILD}
			mkdir -p ${XISLBUILD}
		else
			XISLBUILD=$(mktemp -d)
		fi
		cd ${XISLBUILD}
		echo -n "Configuring ISL for CrossGCC..."
		${ISLSRC}/configure -v \
		--build=${HOSTARCH} --host=${HOSTARCH} \
		\
		--prefix=${ISL_XBIN} --libdir=${ISL_XBIN}/lib --libexecdir=${ISL_XBIN}/lib \
		\
		--disable-shared --enable-static \
		CC="ccache ${HOSTARCH}-gcc" \
		CXX="ccache ${HOSTARCH}-g++" \
		CFLAGS="${COMMON_CFLAGS}" \
		CXXFLAGS="${COMMON_CFLAGS}" \
		> ${LOGS}/x${ISLPKG}.log 2>&1 || exit 1
		echo "Done"
		echo -n "Compiling ISL for CrossGCC..."
		make >> ${LOGS}/x${ISLPKG}.log 2>&1 || exit 1
		echo "Done."
		echo -n "Installing ISL for CrossGCC..."
		make install >> ${LOGS}/x${ISLPKG}.log 2>&1 || exit 1
		echo "Done."
		echo ""
		cd ..
		rm -rf ${XISLBUILD}
	}

	function cross_binutils () {
		if [ "x${BINUTILSBUILD}" != "x" ]
		then
			test -d ${BINUTILSBUILD} && rm -rf ${BINUTILSBUILD}
			mkdir -p ${BINUTILSBUILD}
		else
			BINUTILSBUILD=$(mktemp -d)
		fi
		cd ${BINUTILSBUILD}
		echo -n "Configuring BINUTILS for CrossGCC..."
		${BINUTILSSRC}/configure -v \
		--build=${HOSTARCH} --host=${HOSTARCH} --target=${TARGETARCH} \
		--prefix=${PKG_XBIN} --libdir=${PKG_XBIN}/lib --libexecdir=${PKG_XBIN}/lib \
		--with-isl=${ISL_XBIN} \
		${BINUTILSCOMMONCONFIG} \
		CC="ccache ${HOSTARCH}-gcc" \
		CXX="ccache ${HOSTARCH}-g++" \
		CFLAGS="${COMMON_CFLAGS}" \
		CXXFLAGS="${COMMON_CFLAGS}" \
		> ${LOGS}/x${BINUTILSPKG}.log 2>&1 || exit 1
		echo "Done"
		echo -n "Compiling BINUTILS for CrossGCC..."
		make >> ${LOGS}/x${BINUTILSPKG}.log 2>&1 || exit 1
		echo "Done."
		echo -n "Installing BINUTILS for CrossGCC..."
		make install-strip >> ${LOGS}/x${BINUTILSPKG}.log 2>&1 || exit 1
		# program_transform_regex || exit 1
		echo "Done."
		echo ""
		cd ..
		rm -rf ${BINUTILSBUILD}
	}

	function test_cross_gcc () {
		echo -n "Testing XGCC..."
		CPUARCH=$(echo ${TARGETARCH} | sed 's/\(+*\)-.*/\1/g')
		QEMU=0
		test -f "$(which qemu-${CPUARCH} 2>/dev/null)" && QEMU=1
		TESTSTRING="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
		cat > /tmp/${TESTSTRING}.c <<-EOF
			#include <stdio.h>

			int
			main (void)
			{
			printf ("${TESTSTRING}\n");
			return 0;
			}
		EOF
		echo -n "Compile test..."
		${TARGETARCH}-gcc /tmp/${TESTSTRING}.c -o /tmp/${TESTSTRING} || exit 1
		if [ "${QEMU}" -eq "1" ]
		then
			echo -n "Test executable with qemu-${CPUARCH}..."
			TEST=$(qemu-${CPUARCH} -L ${SYSROOT} /tmp/${TESTSTRING}) || exit 1
			[ ! "${TEST}" == "${TESTSTRING}" ] && exit 1
		fi
		rm -f /tmp/${TESTSTRING}.c /tmp/${TESTSTRING}
		echo "Done."
		echo ""
	}

function cross_gcc () {
#	cross_isl || exit 1
	test -d ${PKG_XBIN} && rm -rf ${PKG_XBIN}
	mkdir -p ${PKG_XBIN}
	#host_gcc || exit 1
#	cross_binutils || exit 1
	create_base_sources --with-isl --with-binutils
	if [ "x${XGCCBUILD}" != "x" ]
	then
		test -d ${XGCCBUILD} && rm -rf ${XGCCBUILD}
		mkdir -p ${XGCCBUILD}
	else
		XGCCBUILD=$(mktemp -d)
	fi
	cd ${XGCCBUILD}
	echo -n "Configuring CrossGCC..."
	#--with-isl=${ISL_XBIN}
	${BASESRC}/configure -v \
	--build=${HOSTARCH} --host=${HOSTARCH} --target=${TARGETARCH} \
	${GCCTARGETCONFIG} \
	--prefix=${PKG_XBIN} --libdir=${PKG_XBIN}/lib --libexecdir=${PKG_XBIN}/lib --with-sysroot=${SYSROOT} \
	${BINUTILSCOMMONCONFIG} ${GCCCOMMONCONFIG} \
	CC_FOR_BUILD="ccache ${HOSTARCH}-gcc -O3 -pipe" \
	CXX_FOR_BUILD="ccache ${HOSTARCH}-g++ -O3 -pipe" \
	CC="ccache ${HOSTARCH}-gcc" \
	CXX="ccache ${HOSTARCH}-g++" \
	CFLAGS="${COMMON_CFLAGS}" \
	CXXFLAGS="${COMMON_CFLAGS}" \
	CFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	> ${LOGS}/x${GCCPKG}.log 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling CrossGCC..."
	#echo -n "Build all-gas workaround..."
	#make all-gas >> ${LOGS}/x${GCCPKG}.log 2>&1 || exit 1
	make >> ${LOGS}/x${GCCPKG}.log 2>&1 || exit 1
	echo "Done."
	echo -n "Installing CrossGCC..."
	make install-strip >> ${LOGS}/x${GCCPKG}.log 2>&1 || exit 1
	echo "Done."
	echo "You can find the final CrossGCC binaries for ${TARGETARCH} here:"
	echo "${PKG_XBIN}"
	echo ""
	cd ..
	rm -rf ${XGCCBUILD}
	rm -rf ${BASESRC}
	test_cross_gcc || exit 1
	cat >${PKG_XBIN}.source <<-EOF
		# To prepare the build environment launch:
		#
		# source ${PKG_XBIN}.source

		export PATH=${PKG_XBIN}/bin:\${PATH}
		export SYSROOT=${SYSROOT}
	EOF
}

	function isl () {
		test -d ${ISL_BIN} && rm -rf ${ISL_BIN}
		mkdir -p ${ISL_BIN}
		if [ "x${ISLBUILD}" != "x" ]
		then
			test -d ${ISLBUILD} && rm -rf ${ISLBUILD}
			mkdir -p ${ISLBUILD}
		else
			ISLBUILD=$(mktemp -d)
		fi
		cd ${ISLBUILD}
		echo -n "Configuring ISL for Final GCC..."
		${ISLSRC}/configure -v \
		--build=${HOSTARCH} --host=${TARGETARCH} \
		\
		--prefix=${ISL_BIN} --libdir=${ISL_BIN}/lib --libexecdir=${ISL_BIN}/lib \
		\
		--disable-shared --enable-static \
		CC="ccache ${TARGETARCH}-gcc" \
		CFLAGS="${COMMON_CFLAGS} --sysroot=${SYSROOT}" \
		> ${LOGS}/${ISLPKG}.log 2>&1 || exit 1
		echo "Done"
		echo -n "Compiling ISL for Final GCC..."
		make >> ${LOGS}/${ISLPKG}.log 2>&1 || exit 1
		echo "Done."
		echo -n "Installing ISL for Final GCC..."
		make install >> ${LOGS}/${ISLPKG}.log 2>&1 || exit 1
		echo "Done."
		echo ""
		cd ..
		rm -rf ${ISLBUILD}
	}

	function binutils () {
		if [ "x${BINUTILSBUILD}" != "x" ]
		then
			test -d ${BINUTILSBUILD} && rm -rf ${BINUTILSBUILD}
			mkdir -p ${BINUTILSBUILD}
		else
			BINUTILSBUILD=$(mktemp -d)
		fi
		cd ${BINUTILSBUILD}
		echo -n "Configuring BINUTILS..."
		${BINUTILSSRC}/configure -v \
		--build=${HOSTARCH} --host=${TARGETARCH} --target=${TARGETARCH} \
		--with-build-sysroot=${SYSROOT} --program-suffix=-${BINUTILSVER} \
		--prefix=${PKG_BIN}/usr --libdir=${PKG_BIN}/lib/${TARGETARCH}/${BINUTILSVER} --libexecdir=${PKG_BIN}/lib \
		--with-isl=${ISL_BIN} \
		${BINUTILSCOMMONCONFIG} \
		CC="ccache ${TARGETARCH}-gcc" \
		CXX="ccache ${TARGETARCH}-g++" \
		CFLAGS="${COMMON_CFLAGS}" \
		CXXFLAGS="${COMMON_CFLAGS}" \
		> ${LOGS}/${BINUTILSPKG}.log 2>&1 || exit 1
		echo "Done"
		echo -n "Compiling BINUTILS..."
		#tooldir=${PKG_BIN}/usr
		make tooldir=${PKG_BIN}/usr >> ${LOGS}/${BINUTILSPKG}.log 2>&1 || exit 1
		echo "Done."
		echo -n "Installing BINUTILS..."
		make tooldir=${PKG_BIN}/usr install-strip >> ${LOGS}/${BINUTILSPKG}.log 2>&1 || exit 1
		# program_transform_regex || exit 1
		echo "Done."
		echo ""
		cd ..
		rm -rf ${BINUTILSBUILD}
	}

function gcc () {
	#isl || exit 1
	test -d ${PKG_BIN} && rm -rf ${PKG_BIN}
	mkdir -p ${PKG_BIN}
	if [ "${WITH_NATIVE_BINUTILS}" = "1" ]
	then
		create_base_sources --with-isl --with-binutils
		#binutils || exit 1
	else
		create_base_sources
	fi
	if [ "x${GCCBUILD}" != "x" ]
	then
		test -d ${GCCBUILD} && rm -rf ${GCCBUILD}
		mkdir -p ${GCCBUILD}
	else
		GCCBUILD=$(mktemp -d)
	fi
	cd ${GCCBUILD}
	echo -n "Configuring Final GCC..."
	#--with-isl=${ISL_BIN}
	${BASESRC}/configure -v \
	--build=${HOSTARCH} --host=${TARGETARCH} --target=${TARGETARCH} \
	--program-suffix=-${GCCVER} \
	--prefix=/usr --libdir=/usr/lib/${TARGETARCH}/${GCCVER} --libexecdir=/usr/lib --with-slibdir=/lib/${TARGETARCH}/${GCCVER} --with-sysroot=/ \
	${GCCTARGETCONFIG} ${GCCCOMMONCONFIG} ${BINUTILSCOMMONCONFIG} \
	CC_FOR_BUILD="ccache ${HOSTARCH}-gcc" \
	CXX_FOR_BUILD="ccache ${HOSTARCH}-g++" \
	CC="ccache ${TARGETARCH}-gcc --sysroot=${SYSROOT}" \
	CXX="ccache ${TARGETARCH}-g++ --sysroot=${SYSROOT}" \
	CFLAGS="${COMMON_CFLAGS}" \
	CXXFLAGS="${COMMON_CFLAGS}" \
	CC_FOR_TARGET="ccache ${TARGETARCH}-gcc" \
	CXX_FOR_TARGET="ccache ${TARGETARCH}-g++" \
	CFLAGS_FOR_TARGET="${COMMON_CFLAGS} --sysroot=${SYSROOT}" \
	CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS} --sysroot=${SYSROOT}" \
	host_configargs="gcc_cv_objdump=${TARGETARCH}-objdump" \
	> ${LOGS}/${GCCPKG}.log 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling Final GCC..."
	make >> ${LOGS}/${GCCPKG}.log 2>&1 || exit 1
	echo "Done."
	echo -n "Installing Final GCC..."
	make DESTDIR=${PKG_BIN} install-strip >> ${LOGS}/${GCCPKG}.log 2>&1 || exit 1
	echo "Done."
	echo "You can find the final GCC binaries for ${TARGETARCH} here:"
	echo "${PKG_BIN}"
	echo ""
	cd ..
	rm -rf ${BASESRC}
	rm -rf ${GCCBUILD}
}

function zip_gcc () {
	echo -n "Zipping final GCC..."
	test -f ${PKG_TAR} && rm -f ${PKG_TAR}
	cd ${PKG_BIN}
	tar cf - . | xz -z -T0 - >> ${PKG_TAR}
	echo "Done."
	echo "You can find the final GCC package here:"
	echo "${PKG_TAR}"
	echo ""
}

function send_gcc () {
	test ! -z "${SCPDEST:-}" && test -f ${PKG_TAR} && scp ${SCPPORT:+-P${SCPPORT}} ${PKG_TAR} ${SCPDEST}
}

function finalize () {
	cd ${START_PWD}
}

function all_steps () {
	prepare_sources || exit 1
	cross_gcc || exit 1
	gcc || exit 1
	zip_gcc || exit 1
	finalize || exit 1
	exit 0
}

test ! -d ${TOOLCHAINS} && mkdir -p ${TOOLCHAINS}
test ! -d ${LOGS} && mkdir -p ${LOGS}

case "${1}" in
	-h|--help|"")
		cat <<-EOF
			Help:

			${PROGRAM_NAME} [parameters] [{-S|--send} [username@]<IP or hostname>:[path] [{-P|--port} <ssh port>]] <recipe_file>

			-a --all
			-s --create-sysroot
			-p --prepare-source
			-x --cross-gcc
			-f --final-gcc
			-S --send
			-P --port
			-h --help
		EOF
		finalize
		exit 0
	;;
	*)
		RECIPEFILE=${@:$#}
		echo "Recipe name: ${RECIPEFILE}"
		test ! -f "${RECIPEFILE}" && echo "${RECIPEFILE} doesn't exist" && exit 1
		. $(realpath ${RECIPEFILE})
		ISL_XBIN=${LIBRARIES}/${HOSTARCH}/${ISLPKG}
		ISL_BIN=${LIBRARIES}/${TARGETARCH}/${ISLPKG}
		PKG_XBIN=${XCOMPILERS}/${PKG_NAME}
		PKG_BIN=${NATIVES}/${PKG_NAME}
		PKG_TAR=${NATIVES}/${PKG_NAME}.tar.xz
		export SYSROOT=${TOOLCHAINS}/sysroots/${DISTRO_NAME}/${DISTRO_REL}/${DISTRO_ARCH}
		export PATH="${PKG_XBIN}/bin:${PATH}"
		[ "$1" == "${RECIPEFILE}" ] && all_steps
	;;
esac

while (( "${#} - 1" )); do
	#echo "Evaluate ${1}"
	case ${1} in
		-s|--create-sysroot)
			create_sysroot || exit 1
		;;
		-p|--prepare-source)
			prepare_sources || exit 1
		;;
		-x|--cross-gcc)
			cross_gcc || exit 1
		;;
		-f|--final-gcc)
			gcc || exit 1
			zip_gcc || exit 1
		;;
		-z|--zip-gcc)
			zip_gcc || exit 1
		;;
		-S|--send-gcc)
			shift
			SCPDEST=${1}
			shift
			if [ ${1} == "-P" ] || [ ${1} == "--port" ]
			then
				SCPPORT="${2}"
				shift
			fi
			send_gcc
			break
		;;
		-a|--all)
			all_steps
		;;
		-b|--binutils)
			binutils || exit 1
		;;
		*)
			echo "Unrecognized parameter $1"
			exit 1
		;;
	esac
	shift

done

finalize