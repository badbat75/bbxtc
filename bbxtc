#!/bin/bash
START_PWD=${PWD}
PROGRAM_PATH=$(dirname $(realpath ${0}))
PROGRAM_NAME=$(basename ${0})

TOOLCHAINS=${HOME}/toolchains
SOURCES=${TOOLCHAINS}/sources
NATIVES=${TOOLCHAINS}/natives
LIBRARIES=${TOOLCHAINS}/libraries
XCOMPILERS=${TOOLCHAINS}/xcompilers
LOGS=${TOOLCHAINS}/logs

HOSTARCH=$(cc -dumpmachine)

NTHREADS=$(echo $(nproc)/2+1 | bc)
export MAKEFLAGS="-j\${NTHREADS} V=1"

SCPPORT=22

# Not used yet
function program_transform_regex () {
	### Apply objdump libcc1 configure bug workaround
	echo "Applying objdump configuration workaround for final GCC..."
	cd ${XGCCBIN}/bin
	for file in $(ls)
	do
		ln -s ${file} $(echo ${file} | sed 's/arm-/arm-unknown-/g')
	done
	cd -
}

function create_sysroot() {
	echo -n "Creating SYSROOT environment..."
	${PROGRAM_PATH}/sysrootutils/create_sysroot ${DISTRO_NAME} ${DISTRO_REL} ${DISTRO_ARCH} || exit 1
	echo "Done"
	echo ""
}

function prepare_sources () {
	test ! -d ${SOURCES} && mkdir -p ${SOURCES}
	if [ ! -f "${ISLSRC}/configure" ]
	then
		echo -n "Downloading ISL..."
		wget -nc -q -P${SOURCES} --content-disposition "${ISLURL}" || exit 1
		echo "Done."
		echo -n "Uncompress ISL..."
		tar xJf ${ISLSRC}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		echo ""
	fi
	if [ ! -f "${BINUTILSSRC}/configure" ]
	then
		echo -n "Downloading BINUTILS..."
		wget -nc -q -P${SOURCES} --content-disposition "${BINUTILSURL}" || exit 1
		echo "Done."
		echo -n "Uncompress BINUTILS..."
		tar xJf ${SOURCES}/binutils-${BINUTILSVER}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		echo ""
	fi
	if [ ! -f "${GCCSRC}/configure" ]
	then
		echo -n "Downloading GCC..."
		wget -nc -q -P${SOURCES} --content-disposition "${GCCURL}" || exit 1
		echo "Done."
		echo -n "Uncompress GCC..."
		tar xJf ${SOURCES}/gcc-arm-src-snapshot-8.2-2018.08.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		patchnum=0
		if [ ! "x${GCCPATCHES}" == "x" ]
		then
			echo -n "Patching GCC..."
			for patch in ${GCCPATCHES}
			do
				let "patchnum=patchnum+1"
				patch_url="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\1/g')"
				patch_name="${GCCSRC}-$(printf "%02d\n" ${patchnum}).patch"
				patch_param="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\2/g')"
				echo -n "$patch_name... "
				wget -nc -q -O${patch_name} "${patch_url}" || exit 1
				cd ${GCCSRC}
				patch $patch_param < ${SOURCES}/${patch_name} || exit 1
				echo "Done."
				cd -
			done
		fi
		echo ""
	fi
}

function cross_isl () {
	test -d ${XISLBIN} && rm -rf ${XISLBIN}
	mkdir -p ${XISLBIN}
	if [ "x${XISLBUILD}" != "x" ]
	then
		test -d ${XISLBUILD} && rm -rf ${XISLBUILD}
		mkdir -p ${XISLBUILD}
	else
		XISLBUILD=$(mktemp -d)
	fi
	cd ${XISLBUILD}
	echo -n "Configuring ISL for CrossGCC..."
	${ISLSRC}/configure -v \
	--build=${HOSTARCH} --host=${HOSTARCH} \
	\
	--prefix=${XISLBIN} --libdir=${XISLBIN}/lib --libexecdir=${XISLBIN}/lib \
	\
	--disable-shared --enable-static --enable-multiarch \
	CC="ccache ${HOSTARCH}-gcc" \
	CXX="ccache ${HOSTARCH}-g++" \
	CFLAGS="${COMMON_CFLAGS}" \
	CXXFLAGS="${COMMON_CFLAGS}" \
	> ${LOGS}/x${ISLPKG}.log 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling ISL for CrossGCC..."
	make >> ${LOGS}/x${ISLPKG}.log 2>&1 || exit 1
	echo "Done."
	echo -n "Installing ISL for CrossGCC..."
	make install >> ${LOGS}/x${ISLPKG}.log 2>&1 || exit 1
	echo "Done."
	echo ""
	cd ..
	rm -rf ${XISLBUILD}
}

function binutils () {
	if [ "x${BINUTILSBUILD}" != "x" ]
	then
		test -d ${BINUTILSBUILD} && rm -rf ${BINUTILSBUILD}
		mkdir -p ${BINUTILSBUILD}
	else
		BINUTILSBUILD=$(mktemp -d)
	fi
	cd ${BINUTILSBUILD}
	echo -n "Configuring BINUTILS..."
	${BINUTILSSRC}/configure -v \
	--build=${HOSTARCH} --host=${HOSTARCH} --target=${TARGETARCH} \
	--with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
	\
	--prefix=${BINUTILSBIN} --libdir=${BINUTILSBIN}/lib --libexecdir=${XGCCBIN}/lib \
	\
	--enable-libquadmath --enable-libquadmath-support --enable-libssp --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-lto --enable-multiarch \
	\
	--with-default-libstdcxx-abi=new --with-system-zlib --with-target-system-zlib --with-isl=${XISLBIN} \
	CC_FOR_BUILD="ccache ${HOSTARCH}-gcc -pipe" \
	CXX_FOR_BUILD="ccache ${HOSTARCH}-g++ -pipe" \
	CC="ccache ${HOSTARCH}-gcc" \
	CXX="ccache ${HOSTARCH}-g++" \
	CFLAGS="${COMMON_CFLAGS}" \
	CXXFLAGS="${COMMON_CFLAGS}" \
	CFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	> ${LOGS}/${BINUTILSPKG}.log 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling BINUTILS..."
	make >> ${LOGS}/${BINUTILSPKG}.log 2>&1 || exit 1
	echo "Done."
	echo -n "Installing BINUTILS..."
	make install-strip >> ${LOGS}/${BINUTILSPKG}.log 2>&1 || exit 1
	# program_transform_regex || exit 1
	echo "Done."
	echo ""
	cd ..
	rm -rf ${BINUTILSBUILD}
}

function cross_gcc () {
	cross_isl || exit 1
	test -d ${XGCCBIN} && rm -rf ${XGCCBIN}
	mkdir -p ${XGCCBIN}
	binutils || exit 1
	if [ "x${XGCCBUILD}" != "x" ]
	then
		test -d ${XGCCBUILD} && rm -rf ${XGCCBUILD}
		mkdir -p ${XGCCBUILD}
	else
		XGCCBUILD=$(mktemp -d)
	fi
	cd ${XGCCBUILD}
	echo -n "Configuring CrossGCC..."
	${GCCSRC}/configure -v \
	--build=${HOSTARCH} --host=${HOSTARCH} --target=${TARGETARCH} \
	--with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
	\
	--prefix=${XGCCBIN} --libdir=${XGCCBIN}/lib --libexecdir=${XGCCBIN}/lib \
	\
	--with-sysroot=${SYSROOT} --with-isl=${XISLBIN} \
	\
	${GCCCOMMONCONFIG} \
	\
	CC_FOR_BUILD="ccache ${HOSTARCH}-gcc -pipe" \
	CXX_FOR_BUILD="ccache ${HOSTARCH}-g++ -pipe" \
	CC="ccache ${HOSTARCH}-gcc" \
	CXX="ccache ${HOSTARCH}-g++" \
	CFLAGS="${COMMON_CFLAGS}" \
	CXXFLAGS="${COMMON_CFLAGS}" \
	CFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	> ${LOGS}/x${GCCPKG}.log 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling CrossGCC..."
	make >> ${LOGS}/x${GCCPKG}.log 2>&1 || exit 1
	echo "Done."
	echo -n "Installing CrossGCC..."
	make install-strip >> ${LOGS}/x${GCCPKG}.log 2>&1 || exit 1
	echo "Done."
	echo "You can find the final CrossGCC binaries for ${TARGETARCH} here: ${XGCCBIN}"
	echo ""
	cd ..
	rm -rf ${XGCCBUILD}
	cat >${XGCCBIN}.source <<-EOF
		# To prepare the build environment launch:
		#
		# source ${XGCCBIN}.source]

		export PATH=${XGCCBIN}/bin:\$PATH
		export SYSROOT=${SYSROOT}
	EOF
}

function test_xgcc () {
	echo -n "Testing XGCC..."
	CPUARCH=$(echo ${TARGETARCH} | sed 's/\(+*\)-.*/\1/g')
	QEMU=0
	test -f "$(which qemu-${CPUARCH} 2>/dev/null)" && QEMU=1
	TESTSTRING="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
	cat > /tmp/${TESTSTRING}.c <<-EOF
		#include <stdio.h>

		int
		main (void)
		{
		printf ("${TESTSTRING}\n");
		return 0;
		}
	EOF
	echo -n "Compile test..."
	${TARGETARCH}-gcc /tmp/${TESTSTRING}.c -o /tmp/${TESTSTRING} || exit 1
	if [ "${QEMU}" -eq "1" ]
	then
		echo -n "Test executable with qemu-${CPUARCH}..."
		TEST=$(qemu-${CPUARCH} -L ${SYSROOT} /tmp/${TESTSTRING}) || exit 1
		[ ! "${TEST}" == "${TESTSTRING}" ] && exit 1
	fi
	rm -f /tmp/${TESTSTRING}.c /tmp/${TESTSTRING}
	echo "Done."
	echo ""
}

function isl () {
	test -d ${ISLBIN} && rm -rf ${ISLBIN}
	mkdir -p ${ISLBIN}
	if [ "x${ISLBUILD}" != "x" ]
	then
		test -d ${ISLBUILD} && rm -rf ${ISLBUILD}
		mkdir -p ${ISLBUILD}
	else
		ISLBUILD=$(mktemp -d)
	fi
	cd ${ISLBUILD}
	echo -n "Configuring ISL Final GCC..."
	${ISLSRC}/configure -v \
	--build=${HOSTARCH} --host=${TARGETARCH} \
	\
	--prefix=${ISLBIN} --libdir=${ISLBIN}/lib/${TARGETARCH} --libexecdir=${ISLBIN}/lib \
	\
	--disable-shared --enable-static --enable-multiarch \
	CC="ccache ${TARGETARCH}-gcc" \
	CFLAGS="${COMMON_CFLAGS} --sysroot=${SYSROOT}" \
	> ${LOGS}/${ISLPKG}.log 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling ISL for Final GCC..."
	make >> ${LOGS}/${ISLPKG}.log 2>&1 || exit 1
	echo "Done."
	echo -n "Installing ISL for Final GCC..."
	make install >> ${LOGS}/${BINUTILSPKG}.log 2>&1 || exit 1
	echo "Done."
	echo ""
	cd ..
	rm -rf ${ISLBUILD}
}

function final_gcc () {
	isl || exit 1
	test -d ${GCCBIN} && rm -rf ${GCCBIN}
	mkdir -p ${GCCBIN}
	if [ "x${GCCBUILD}" != "x" ]
	then
		test -d ${GCCBUILD} && rm -rf ${GCCBUILD}
		mkdir -p ${GCCBUILD}
	else
		GCCBUILD=$(mktemp -d)
	fi
	cd ${GCCBUILD}
	echo -n "Configuring Final GCC..."
	${GCCSRC}/configure -v \
	--build=${HOSTARCH} --host=${TARGETARCH} --target=${TARGETARCH} \
	--program-suffix=-${GCCVER} \
	--with-arch-directory=arm --with-arch=armv6 --with-fpu=vfp --with-float=hard \
	\
	--prefix=/usr --libdir=/usr/lib/${TARGETARCH}/${GCCVER} --libexecdir=/usr/lib --with-slibdir=/lib/${TARGETARCH}/${GCCVER} \
	\
	--with-sysroot=/ --with-isl=${ISLBIN} \
	\
	--with-gmp-include=${SYSROOT}/usr/include/${TARGETARCH} --with-gmp-lib=${SYSROOT}/usr/lib/${TARGETARCH} --with-mpc=${SYSROOT}/usr --with-mpfr=${SYSROOT}/usr --with-isl=${SYSROOT}/usr \
	\
	${GCCCOMMONCONFIG} \
	\
	CC_FOR_BUILD="ccache ${HOSTARCH}-gcc -pipe" \
	CXX_FOR_BUILD="ccache ${HOSTARCH}-g++ -pipe" \
	CC="ccache ${TARGETARCH}-gcc --sysroot=${SYSROOT} -I${SYSROOT}/usr/include/${TARGETARCH} -B${SYSROOT}/usr/lib/${TARGETARCH}" \
	CXX="ccache ${TARGETARCH}-g++ --sysroot=${SYSROOT} -I${SYSROOT}/usr/include/${TARGETARCH} -B${SYSROOT}/usr/lib/${TARGETARCH}" \
	CFLAGS="${COMMON_CFLAGS}" \
	CXXFLAGS="${COMMON_CFLAGS}" \
	LDFLAGS="-L${SYSROOT}/lib/${TARGETARCH}" \
	CC_FOR_TARGET="ccache ${TARGETARCH}-gcc" \
	CXX_FOR_TARGET="ccache ${TARGETARCH}-g++" \
	CFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
	host_configargs="gcc_cv_objdump=${TARGETARCH}-objdump" \
	> ${LOGS}/${GCCSPKG}.log 2>&1 || exit 1
	echo "Done"
	echo -n "Compiling Final GCC..."
	make >> ${LOGS}/${GCCSPKG}.log 2>&1 || exit 1
	echo "Done."
	echo -n "Installing Final GCC..."
	make DESTDIR=${GCCBIN} install-strip >> ${LOGS}/${GCCSPKG}.log 2>&1 || exit 1
	echo "Done."
	echo "You can find the final GCC binaries for ${TARGETARCH} here: ${GCCBIN}"
	echo ""
	cd ..
	rm -rf ${GCCBUILD}
}

function zip_gcc () {
	echo -n "Zipping final GCC..."
	test -f ${GCCTAR} && rm -f ${GCCTAR}
	cd ${GCCBIN} && \
	tar cf - . | xz -z -T0 - >> ${GCCTAR}
	echo "Done."
	echo "You can find the final GCC package here: ${GCCTAR}"
	echo ""
}

function send_gcc () {
	test ! -z "${SCPDEST:-}" && test -f ${GCCTAR} && scp ${SCPPORT:+-P${SCPPORT}} ${GCCTAR} ${SCPDEST}
}

function finalize () {
	cd ${START_PWD}
}

function all_steps () {
	prepare_sources || exit 1
	cross_gcc || exit 1
	test_xgcc || exit 1
	final_gcc || exit 1
	zip_gcc || exit 1
	finalize || exit 1
	exit 0
}

test ! -d ${TOOLCHAINS} && mkdir -p ${TOOLCHAINS}
test ! -d ${LOGS} && mkdir -p ${LOGS}

case "${1}" in
	-h|--help|"")
		cat <<-EOF
			Help:

			${PROGRAM_NAME} [parameters] [{-S|--send} [username@]<IP or hostname>:[path] [{-P|--port} <ssh port>]] <recipe_file>

			-a --all
			-s --create-sysroot
			-p --prepare-source
			-x --cross-gcc
			-f --final-gcc
			-z --zip-gcc
			-S --send
			-P --port
			-h --help
		EOF
		finalize
		exit 0
	;;
	*)
		RECIPEFILE=${@:$#}
		echo "Recipe name: ${RECIPEFILE}"
		test ! -f "${RECIPEFILE}" && echo "${RECIPEFILE} doesn't exist" && exit 1
		. $(realpath ${RECIPEFILE})
		SYSROOT=${TOOLCHAINS}/sysroots/${DISTRO_NAME}/${DISTRO_REL}/${DISTRO_ARCH}
		export PATH="${XGCCBIN}/bin:${PATH}"
		[ "$1" == "${RECIPEFILE}" ] && all_steps
	;;
esac

while (( "${#} - 1" )); do
	echo "Evaluate ${1}"
	case ${1} in
		-s|--create-sysroot)
			create_sysroot || exit 1
		;;
		-p|--prepare-source)
			prepare_sources || exit 1
		;;
		-x|--cross-gcc)
			cross_gcc || exit 1
			test_xgcc || exit 1
		;;
		-f|--final-gcc)
			final_gcc || exit 1
		;;
		-z|--zip-gcc)
			zip_gcc || exit 1
		;;
		-S|--send-gcc)
			shift
			SCPDEST=${1}
			shift
			if [ ${1} == "-P" ] || [ ${1} == "--port" ]
			then
				SCPPORT="${2}"
				shift
			fi
			send_gcc
		;;
		-a|--all)
			all_steps
		;;
		*)
			echo "Unrecognized parameter $1"
			exit 1
		;;
	esac
	shift

done

finalize