#!/bin/bash
BBXTCVER=0.9
START_PWD=${PWD}
PROGRAM_PATH=$(dirname $(realpath ${0}))
PROGRAM_NAME=$(basename ${0})

TOOLCHAINS=${HOME}/toolchains
SOURCES=${TOOLCHAINS}/sources
NATIVES=${TOOLCHAINS}/natives
LIBRARIES=${TOOLCHAINS}/libraries
HCOMPILERS=${TOOLCHAINS}/hcompilers
XCOMPILERS=${TOOLCHAINS}/xcompilers
LOGS=${TOOLCHAINS}/logs

NTHREADS=$(echo $(nproc)/2+1 | bc)
export MAKEFLAGS="-j${NTHREADS} V=1"

SCPPORT=22

function create_sysroot() {
	echo -n "Creating SYSROOT environment..."
	${PROGRAM_PATH}/sysrootutils/create_sysroot ${DISTRO_NAME} ${DISTRO_REL} ${DISTRO_ARCH} || exit 1
	echo "Done"
	echo ""
}

function prepare_sources () {
	echo "Setting up sources"
	echo "=================="

	test ! -d ${SOURCES} && mkdir -p ${SOURCES}
	if [ ! -f "${ISLSRC}/configure" ]
	then
		echo -n "Downloading ISL..."
		wget -nc -q -P${SOURCES} --content-disposition "${ISLURL}" || exit 1
		echo "Done."
		echo -n "Uncompress ISL..."
		tar xJf ${ISLSRC}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		echo ""
	fi
	if [ ! -f "${BINUTILSSRC}/configure" ]
	then
		echo -n "Downloading binutils..."
		wget -nc -q -P${SOURCES} --content-disposition "${BINUTILSURL}" || exit 1
		echo "Done."
		echo -n "Uncompress binutils..."
		tar xJf ${SOURCES}/binutils-${BINUTILSVER}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		echo ""
	fi
	if [ ! -f "${GCCSRC}/configure" ]
	then
		echo -n "Downloading GCC..."
		wget -nc -q -P${SOURCES} --content-disposition "${GCCURL}" || exit 1
		echo "Done."
		echo -n "Uncompress GCC..."
		tar xJf ${GCCSRC}.tar.xz -C${SOURCES} || exit 1
		echo "Done."
		patchnum=0
		if [ ! "x${GCCPATCHES}" == "x" ]
		then
			echo -n "Patching GCC..."
			for patch in ${GCCPATCHES}
			do
				let "patchnum=patchnum+1"
				patch_url="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\1/g')"
				patch_name="${GCCSRC}-$(printf "%02d\n" ${patchnum}).patch"
				patch_param="$(echo $patch | sed -E 's/(.*)\[(.*)\]/\2/g')"
				echo -n "$patch_name... "
				wget -nc -q -O${patch_name} "${patch_url}" || exit 1
				cd ${GCCSRC}
				patch $patch_param < ${SOURCES}/${patch_name} || exit 1
				echo "Done."
				cd -
			done
		fi
		echo ""
	fi
}

function create_base_sources () {
	BASESRC="$(mktemp -d)"
	test -d "${BASESRC}" && rm -rf ${BASESRC}
	mkdir ${BASESRC}
	ln -fs ${GCCSRC}/* ${BASESRC}
	while (( "${#}" )); do
		case ${1} in
			--with-isl)
					echo -n "Including ISL in GCC sources..."
					ln -fs ${ISLSRC} ${BASESRC}/isl
					echo "Done."
			;;
			--with-binutils)
					echo -n "Including binutils in GCC sources..."
					ln -fs ${BINUTILSSRC}/* ${BASESRC}
					echo "Done."
			;;
		esac
		shift
	done
}

function host_gcc () {
	echo "Hosted GCC"
	echo "=========="
	if [ "${WITH_NATIVE_BINUTILS}" = "1" ]
	then
		create_base_sources --with-isl --with-binutils
	else
		create_base_sources --with-isl
	fi
	HGCCBUILD=$(mktemp -d)
	cd ${HGCCBUILD}
	echo "Configuring Host Toolchain sources..."
	case $(uname -m) in
		x86_64) BINUTILSHOSTCONFIG="--libdir=${PKG_HBIN}/lib64 ${BINUTILSHOSTCONFIG}"
				HOST_LD_LIBRARY_PATH="${PKG_HBIN}/lib64"
				;;
		*) 		HOST_LD_LIBRARY_PATH="${PKG_HBIN}/lib"
				;;
	esac
	set -x
	${BASESRC}/configure -v \
		--build=${HOSTARCH} --host=${HOSTARCH} --target=${HOSTARCH} \
		--prefix=${PKG_HBIN} --mandir=${PKG_HBIN}/share/man --infodir=${PKG_HBIN}/share/info \
		${BINUTILSCOMMONCONFIG} ${GCCCOMMONCONFIG} ${BINUTILSHOSTCONFIG} ${GCCHOSTCONFIG} \
		> ${LOGS}/host-${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done"
	echo "Compiling Host Toolchain..."
	set -x
	make \
		BOOT_CFLAGS="${COMMON_CFLAGS}" \
		CFLAGS="${COMMON_CFLAGS} -march=native" \
		CXXFLAGS="${COMMON_CFLAGS} -march=native" \
		CFLAGS_FOR_TARGET="${COMMON_CFLAGS} -march=native" \
		CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS} -march=native" \
		LD_LIBRARY_PATH=${HGCCBUILD}/prev-opcodes/.libs:${HGCCBUILD}/prev-bfd/.libs \
		tooldir=${PKG_HBIN} \
		>> ${LOGS}/host-${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done."
	test -d ${PKG_HBIN} && rm -rf ${PKG_HBIN}
	mkdir -p ${PKG_HBIN}
	echo "Installing Host Toolchain..."
	set -x
	make tooldir=${PKG_HBIN} install-strip >> ${LOGS}/host-${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done."
	echo "You can find the final HostGCC binaries for ${TARGETARCH} here:"
	echo "${PKG_HBIN}"
	echo ""
	cd ..
	rm -rf ${HGCCBUILD}
	rm -rf ${BASESRC}
	cat > ${PKG_HBIN}.source <<-EOF
		# To prepare the build environment launch:
		#
		# source ${PKG_HBIN}.source

		export PATH=${PKG_HBIN}/bin:\${PATH}
		export LD_LIBRARY_PATH=${HOST_LD_LIBRARY_PATH}:\${LD_LIBRARY_PATH}
	EOF
	. ${PKG_HBIN}.source
}

function test_cross_gcc () {
	echo -n "Testing XGCC..."
	CPUARCH=$(echo ${TARGETARCH} | sed 's/\(+*\)-.*/\1/g')
	QEMU=0
	test -f "$(which qemu-${CPUARCH} 2>/dev/null)" && QEMU=1
	TESTSTRING="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
	cat > /tmp/${TESTSTRING}.c <<-EOF
		#include <stdio.h>

		int
		main (void)
		{
		printf ("${TESTSTRING}\n");
		return 0;
		}
	EOF
	echo -n "Compile test..."
	${TARGETARCH}-gcc /tmp/${TESTSTRING}.c -o /tmp/${TESTSTRING} || exit 1
	if [ "${QEMU}" -eq "1" ]
	then
		echo -n "Test executable with qemu-${CPUARCH}..."
		TEST=$(qemu-${CPUARCH} -L ${SYSROOT} /tmp/${TESTSTRING}) || exit 1
		[ ! "${TEST}" == "${TESTSTRING}" ] && exit 1
	fi
	rm -f /tmp/${TESTSTRING}.c /tmp/${TESTSTRING}
	echo "Done."
	echo ""
}

function cross_gcc () {
	echo "Cross GCC for ${TARGETARCH}"
	echo "===================================="
	if [ "${WITH_NATIVE_BINUTILS}" = "1" ]
	then
		create_base_sources --with-isl --with-binutils
	else
		create_base_sources --with-isl
	fi
	XGCCBUILD=$(mktemp -d)
	cd ${XGCCBUILD}
	echo -n "Configuring Cross Toolchain sources..."
	set -x
	${BASESRC}/configure -v \
		--build=${HOSTARCH} --host=${HOSTARCH} --target=${TARGETARCH} \
		--prefix=${PKG_XBIN} --libdir=${PKG_XBIN}/lib --libexecdir=${PKG_XBIN}/lib --with-sysroot=${SYSROOT} \
		${BINUTILSCOMMONCONFIG} ${GCCCOMMONCONFIG} ${BINUTILSCROSSCONFIG} ${GCCCROSSCONFIG} \
		> ${LOGS}/cross-${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done"
	echo -n "Compiling Cross Toolchain..."
	set -x
	PATH=${PKG_XBIN}/bin:${PATH} make \
		CFLAGS_FOR_BUILD="${COMMON_CFLAGS} -march=native" \
		CXXFLAGS_FOR_BUILD="${COMMON_CFLAGS} -march=native" \
		CFLAGS="${COMMON_CFLAGS} -march=native" \
		CXXFLAGS="${COMMON_CFLAGS} -march=native" \
		CFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
		CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS}" \
		>> ${LOGS}/cross-${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done."
	test -d ${PKG_XBIN} && rm -rf ${PKG_XBIN}
	mkdir -p ${PKG_XBIN}
	echo -n "Installing Cross Toolchain..."
	set -x
	make install-strip >> ${LOGS}/cross-${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done."
	test_cross_gcc || exit 1
	rm -rf ${XGCCBUILD}
	rm -rf ${BASESRC}
	cat >${PKG_XBIN}.source <<-EOF
		# To prepare the build environment launch:
		#
		# source ${PKG_XBIN}.source

		export PATH=${PKG_XBIN}/bin:\${PATH}
		${LD_LIBRARY_PATH:+"export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}"}
		export SYSROOT=${SYSROOT}
	EOF
	echo "You can find the final CrossGCC binaries for ${TARGETARCH} here:"
	echo "${PKG_XBIN}"
	echo ""
}

function test_target_gcc () {
	echo -n "Testing  Final GCC..."
	CPUARCH=$(echo ${TARGETARCH} | sed 's/\(+*\)-.*/\1/g')
	QEMU=0
	test -f "$(which qemu-${CPUARCH} 2>/dev/null)" && QEMU=1
	if [ "${QEMU}" -eq "1" ]
		then
		TESTSTRING="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
		cat > /tmp/${TESTSTRING}.c <<-EOF
			#include <stdio.h>

			int
			main (void)
			{
			printf ("${TESTSTRING}\n");
			return 0;
			}
		EOF
		echo -n "Compile test with qemu-${CPUARCH}..."
		qemu-${CPUARCH} -L ${SYSROOT} ${PKG_BIN}/usr/bin/gcc /tmp/${TESTSTRING}.c -o /tmp/${TESTSTRING} || exit 1
		echo -n "Test executable with qemu-${CPUARCH}..."
		TEST=$(qemu-${CPUARCH} -L ${SYSROOT} /tmp/${TESTSTRING}) || exit 1
		[ ! "${TEST}" == "${TESTSTRING}" ] && exit 1
	fi
	rm -f /tmp/${TESTSTRING}.c /tmp/${TESTSTRING}
	echo "Done."
	echo ""
}

function target_gcc () {
	echo "Target GCC for ${TARGETARCH}"
	echo "===================================="
	if [ "${WITH_NATIVE_BINUTILS}" = "1" ]
	then
		create_base_sources --with-isl --with-binutils
	else
		create_base_sources --with-isl
	fi
	GCCBUILD=$(mktemp -d)
	cd ${GCCBUILD}
	echo "Configuring target Toolchain sources..."
	set -x
	${BASESRC}/configure -v \
	--build=${HOSTARCH} --host=${TARGETARCH} --target=${TARGETARCH} \
	--program-suffix=-${GCCVER} \
	--prefix=/usr --libdir=/usr/lib/${TARGETARCH}/${GCCVER} --libexecdir=/usr/lib --with-slibdir=/lib/${TARGETARCH}/${GCCVER} --with-sysroot=/ \
	${BINUTILSCOMMONCONFIG} ${GCCCOMMONCONFIG} ${BINUTILSTARGETCONFIG} ${GCCTARGETCONFIG} \
	--disable-multilib \
	host_configargs="gcc_cv_objdump=${TARGETARCH}-objdump" \
	> ${LOGS}/${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done"
	echo "Compiling target Toolchain..."
	set -x
	make \
		CFLAGS_FOR_BUILD="${COMMON_CFLAGS}" \
		CXXFLAGS_FOR_BUILD="${COMMON_CFLAGS}" \
		CC="${TARGETARCH}-gcc --sysroot=${SYSROOT}" \
		CXX="${TARGETARCH}-g++ --sysroot=${SYSROOT}" \
		CFLAGS="${COMMON_CFLAGS}" \
		CXXFLAGS="${COMMON_CFLAGS}" \
		CFLAGS_FOR_TARGET="${COMMON_CFLAGS} --sysroot=${SYSROOT}" \
		CXXFLAGS_FOR_TARGET="${COMMON_CFLAGS} --sysroot=${SYSROOT}" \
		>> ${LOGS}/${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done."
	test -d ${PKG_BIN} && rm -rf ${PKG_BIN}
	mkdir -p ${PKG_BIN}
	echo "Installing target Toolchain..."
	set -x
	make DESTDIR=${PKG_BIN} install-strip >> ${LOGS}/${GCCPKG}.log 2>&1 || exit 1
	set +x
	echo "Done."
	echo "You can find the final GCC binaries for ${TARGETARCH} here:"
	echo "${PKG_BIN}"
	echo ""
	cd ..
	rm -rf ${BASESRC}
	rm -rf ${GCCBUILD}
}

function zip_gcc () {
	echo -n "Zipping final GCC..."
	test -f ${PKG_TAR} && rm -f ${PKG_TAR}
	cd ${PKG_BIN}
	tar cf - . | xz -z -T0 - >> ${PKG_TAR}
	echo "Done."
	echo "You can find the final GCC package here:"
	echo "${PKG_TAR}"
	echo ""
}

function send_gcc () {
	test ! -z "${SCPDEST:-}" && test -f ${PKG_TAR} && scp ${SCPPORT:+-P${SCPPORT}} ${PKG_TAR} ${SCPDEST}
}

function finalize () {
	cd ${START_PWD}
}

function all_steps () {
	prepare_sources || exit 1
	cross_gcc || exit 1
	target_gcc || exit 1
	zip_gcc || exit 1
	finalize || exit 1
	exit 0
}

case "${1}" in
	-h|--help|"")
		cat <<-EOF
			Help:

			${PROGRAM_NAME} [parameters] [{-S|--send} [username@]<IP or hostname>:[path] [{-P|--port} <ssh port>]] <recipe_file>

			-H --host-gcc
			-a --all
			-s --create-sysroot
			-p --prepare-source
			-x --cross-gcc
			-t --target-gcc
			-S --send
			-P --port
			-v --version
			-h --help

		EOF
		finalize
		exit 0
	;;
	*)
		RECIPEFILE=${@:$#}
		echo "${PROGRAM_NAME} v${BBXTCVER}"
		echo "================================================"
		echo "Recipe name: ${RECIPEFILE}"
		echo ""
		test ! -f "${RECIPEFILE}" && echo "${RECIPEFILE} doesn't exist" && exit 1
		test ! -d ${TOOLCHAINS} && mkdir -p ${TOOLCHAINS}
		test ! -d ${LOGS} && mkdir -p ${LOGS}
		. $(realpath ${RECIPEFILE})
		HPKG_NAME=${PKG_NAME}
		TPKG_NAME=${PKG_NAME}
		PKG_HBIN=${HCOMPILERS}/${HPKG_NAME}
		PKG_XBIN=${XCOMPILERS}/${TPKG_NAME}
		PKG_BIN=${NATIVES}/${TPKG_NAME}
		PKG_TAR=${NATIVES}/${TPKG_NAME}.tar.xz
		export SYSROOT=${TOOLCHAINS}/sysroots/${DISTRO_NAME}/${DISTRO_REL}/${DISTRO_ARCH}
		export PATH="${PKG_XBIN}/bin:${PATH}"
		if [ -x ${PKG_HBIN}/bin/gcc ] && [ -f ${PKG_HBIN}.source ]
		then
			. ${PKG_HBIN}.source
			echo "Added HBIN PATH: ${PKG_HBIN}/bin"
			echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"
			echo ""
		fi
		HOSTARCH=$(gcc -dumpmachine)
		[ "$1" == "${RECIPEFILE}" ] && all_steps
	;;
esac

while (( "${#} - 1" )); do
	#echo "Evaluate ${1}"
	case ${1} in
		-s|--create-sysroot)
			create_sysroot || exit 1
		;;
		-p|--prepare-source)
			prepare_sources || exit 1
		;;
		-x|--cross-gcc)
			cross_gcc || exit 1
		;;
		-t|--target-gcc)
			target_gcc || exit 1
			zip_gcc || exit 1
		;;
		-z|--zip-gcc)
			zip_gcc || exit 1
		;;
		-S|--send-gcc)
			shift
			SCPDEST=${1}
			shift
			if [ ${1} == "-P" ] || [ ${1} == "--port" ]
			then
				SCPPORT="${2}"
				shift
			fi
			send_gcc
			break
		;;
		-H|--host-gcc)
			host_gcc || exit 1
		;;
		-a|--all)
			all_steps
		;;
		-v|--version)
			echo "GCC version in $(which gcc)"
			${HOSTARCH}-gcc -v
			echo ""
			echo "Binutils version in $(which ldd)"
			echo ""
			ld -v
			echo ""
			exit 1
		;;
		*)
			echo "Unrecognized parameter $1"
			exit 1
		;;
	esac
	shift

done

finalize